
Systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001870  08001870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e0  080018e0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080018e0  080018e0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018e0  080018e0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018e4  080018e4  000118e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080018e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000cfa  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000044e  00000000  00000000  00020dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d0  00000000  00000000  00021220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000014a  00000000  00000000  000213f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002d2c  00000000  00000000  0002153a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000017f7  00000000  00000000  00024266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009c3e  00000000  00000000  00025a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000de0  00000000  00000000  0002f69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001858 	.word	0x08001858

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08001858 	.word	0x08001858

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <idle_task>:
	void (*task_handle)(void);
}TASK_STRUCT_t;

TASK_STRUCT_t task[MAX_TASK];

void idle_task(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	while(1) {
 8000294:	e7fe      	b.n	8000294 <idle_task+0x4>

08000296 <task1_handler>:

	}
}

void task1_handler(void) {
 8000296:	b580      	push	{r7, lr}
 8000298:	af00      	add	r7, sp, #0
	while(1){
		//printf("In Task 1\n");
		led_on(9);
 800029a:	2009      	movs	r0, #9
 800029c:	f000 f89a 	bl	80003d4 <led_on>
		task_delay(1000);
 80002a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a4:	f000 f83a 	bl	800031c <task_delay>
		led_off(9);
 80002a8:	2009      	movs	r0, #9
 80002aa:	f000 f8ab 	bl	8000404 <led_off>
		task_delay(1000);
 80002ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b2:	f000 f833 	bl	800031c <task_delay>
		led_on(9);
 80002b6:	e7f0      	b.n	800029a <task1_handler+0x4>

080002b8 <task2_handler>:
	}
}

void task2_handler(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	while(1){
		//printf("In Task 2\n");
		led_on(10);
 80002bc:	200a      	movs	r0, #10
 80002be:	f000 f889 	bl	80003d4 <led_on>
		task_delay(750);
 80002c2:	f240 20ee 	movw	r0, #750	; 0x2ee
 80002c6:	f000 f829 	bl	800031c <task_delay>
		led_off(10);
 80002ca:	200a      	movs	r0, #10
 80002cc:	f000 f89a 	bl	8000404 <led_off>
		task_delay(750);
 80002d0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80002d4:	f000 f822 	bl	800031c <task_delay>
		led_on(10);
 80002d8:	e7f0      	b.n	80002bc <task2_handler+0x4>

080002da <task3_handler>:
	}
}

void task3_handler(void) {
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
	while(1){
		//printf("In Task 3\n");
		led_on(11);
 80002de:	200b      	movs	r0, #11
 80002e0:	f000 f878 	bl	80003d4 <led_on>
		task_delay(500);
 80002e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e8:	f000 f818 	bl	800031c <task_delay>
		led_off(11);
 80002ec:	200b      	movs	r0, #11
 80002ee:	f000 f889 	bl	8000404 <led_off>
		task_delay(500);
 80002f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f6:	f000 f811 	bl	800031c <task_delay>
		led_on(11);
 80002fa:	e7f0      	b.n	80002de <task3_handler+0x4>

080002fc <task4_handler>:
	}
}

void task4_handler(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	while(1){
		//printf("In Task 4\n");
		led_on(12);
 8000300:	200c      	movs	r0, #12
 8000302:	f000 f867 	bl	80003d4 <led_on>
		task_delay(250);
 8000306:	20fa      	movs	r0, #250	; 0xfa
 8000308:	f000 f808 	bl	800031c <task_delay>
		led_off(12);
 800030c:	200c      	movs	r0, #12
 800030e:	f000 f879 	bl	8000404 <led_off>
		task_delay(250);
 8000312:	20fa      	movs	r0, #250	; 0xfa
 8000314:	f000 f802 	bl	800031c <task_delay>
		led_on(12);
 8000318:	e7f2      	b.n	8000300 <task4_handler+0x4>
	...

0800031c <task_delay>:
	}
}

void task_delay(uint32_t delay_count) {
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	if (current_task) {
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <task_delay+0x54>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d01b      	beq.n	8000364 <task_delay+0x48>
		task[current_task].block_count = gtick_count + delay_count;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <task_delay+0x58>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <task_delay+0x54>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	441a      	add	r2, r3
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <task_delay+0x5c>)
 800033c:	0103      	lsls	r3, r0, #4
 800033e:	440b      	add	r3, r1
 8000340:	3304      	adds	r3, #4
 8000342:	601a      	str	r2, [r3, #0]
		task[current_task].task_status = BLOCKED_STATE;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <task_delay+0x54>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <task_delay+0x5c>)
 800034a:	011b      	lsls	r3, r3, #4
 800034c:	4413      	add	r3, r2
 800034e:	3308      	adds	r3, #8
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]

		uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <task_delay+0x60>)
 8000356:	60fb      	str	r3, [r7, #12]
		*pICSR |= (1 << 28);
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	601a      	str	r2, [r3, #0]
	}
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	20000000 	.word	0x20000000
 8000374:	2000007c 	.word	0x2000007c
 8000378:	20000080 	.word	0x20000080
 800037c:	e000ed04 	.word	0xe000ed04

08000380 <init_sched_stack>:

__attribute__((naked)) void init_sched_stack(uint32_t stack_top) {
 8000380:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r"(stack_top):);
 8000382:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8000386:	4770      	bx	lr
}
 8000388:	bf00      	nop
	...

0800038c <init_led>:
uint32_t volatile * const pGPIOA_ODR 	= (uint32_t*) 0x40020014;

void init_led(void) {
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
	uint32_t volatile * const pAHB1ENR 		= (uint32_t*) 0x40023830;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <init_led+0x40>)
 8000394:	607b      	str	r3, [r7, #4]
	uint32_t volatile * const pGPIOA_MODER 	= (uint32_t*) 0x40020000;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <init_led+0x44>)
 8000398:	603b      	str	r3, [r7, #0]

	*pAHB1ENR |= 1;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0201 	orr.w	r2, r3, #1
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
	*pGPIOA_MODER &= ~(0xFF << 18);
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f023 727f 	bic.w	r2, r3, #66846720	; 0x3fc0000
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	601a      	str	r2, [r3, #0]
	*pGPIOA_MODER |= 0x1540000;
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 72aa 	orr.w	r2, r3, #22282240	; 0x1540000
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40023830 	.word	0x40023830
 80003d0:	40020000 	.word	0x40020000

080003d4 <led_on>:

void led_on(uint8_t led_port) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	*pGPIOA_ODR |= (1 << (led_port));
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <led_on+0x2c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	79fa      	ldrb	r2, [r7, #7]
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <led_on+0x2c>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6013      	str	r3, [r2, #0]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40020014 	.word	0x40020014

08000404 <led_off>:

void led_off(uint8_t led_port) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
	*pGPIOA_ODR &= ~(1 << (led_port));
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <led_off+0x2c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	79fa      	ldrb	r2, [r7, #7]
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	43d2      	mvns	r2, r2
 800041c:	4611      	mov	r1, r2
 800041e:	4a04      	ldr	r2, [pc, #16]	; (8000430 <led_off+0x2c>)
 8000420:	400b      	ands	r3, r1
 8000422:	6013      	str	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40020014 	.word	0x40020014

08000434 <init_task_stack>:

void init_task_stack(void) {
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0

	task[0].task_status = RUNNING_STATE;
 800043a:	4b3a      	ldr	r3, [pc, #232]	; (8000524 <init_task_stack+0xf0>)
 800043c:	2201      	movs	r2, #1
 800043e:	721a      	strb	r2, [r3, #8]
	task[1].task_status = RUNNING_STATE;
 8000440:	4b38      	ldr	r3, [pc, #224]	; (8000524 <init_task_stack+0xf0>)
 8000442:	2201      	movs	r2, #1
 8000444:	761a      	strb	r2, [r3, #24]
	task[2].task_status = RUNNING_STATE;
 8000446:	4b37      	ldr	r3, [pc, #220]	; (8000524 <init_task_stack+0xf0>)
 8000448:	2201      	movs	r2, #1
 800044a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	task[3].task_status = RUNNING_STATE;
 800044e:	4b35      	ldr	r3, [pc, #212]	; (8000524 <init_task_stack+0xf0>)
 8000450:	2201      	movs	r2, #1
 8000452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	task[4].task_status = RUNNING_STATE;
 8000456:	4b33      	ldr	r3, [pc, #204]	; (8000524 <init_task_stack+0xf0>)
 8000458:	2201      	movs	r2, #1
 800045a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	task[0].task_handle = idle_task;
 800045e:	4b31      	ldr	r3, [pc, #196]	; (8000524 <init_task_stack+0xf0>)
 8000460:	4a31      	ldr	r2, [pc, #196]	; (8000528 <init_task_stack+0xf4>)
 8000462:	60da      	str	r2, [r3, #12]
	task[1].task_handle = task1_handler;
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <init_task_stack+0xf0>)
 8000466:	4a31      	ldr	r2, [pc, #196]	; (800052c <init_task_stack+0xf8>)
 8000468:	61da      	str	r2, [r3, #28]
	task[2].task_handle = task2_handler;
 800046a:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <init_task_stack+0xf0>)
 800046c:	4a30      	ldr	r2, [pc, #192]	; (8000530 <init_task_stack+0xfc>)
 800046e:	62da      	str	r2, [r3, #44]	; 0x2c
	task[3].task_handle = task3_handler;
 8000470:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <init_task_stack+0xf0>)
 8000472:	4a30      	ldr	r2, [pc, #192]	; (8000534 <init_task_stack+0x100>)
 8000474:	63da      	str	r2, [r3, #60]	; 0x3c
	task[4].task_handle = task4_handler;
 8000476:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <init_task_stack+0xf0>)
 8000478:	4a2f      	ldr	r2, [pc, #188]	; (8000538 <init_task_stack+0x104>)
 800047a:	64da      	str	r2, [r3, #76]	; 0x4c

	task[0].psp_value = IDLE_STACK_START;
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <init_task_stack+0xf0>)
 800047e:	4a2f      	ldr	r2, [pc, #188]	; (800053c <init_task_stack+0x108>)
 8000480:	601a      	str	r2, [r3, #0]
	task[1].psp_value = T1_STACK_START;
 8000482:	4b28      	ldr	r3, [pc, #160]	; (8000524 <init_task_stack+0xf0>)
 8000484:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <init_task_stack+0x10c>)
 8000486:	611a      	str	r2, [r3, #16]
	task[2].psp_value = T2_STACK_START;
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <init_task_stack+0xf0>)
 800048a:	4a2e      	ldr	r2, [pc, #184]	; (8000544 <init_task_stack+0x110>)
 800048c:	621a      	str	r2, [r3, #32]
	task[3].psp_value = T3_STACK_START;
 800048e:	4b25      	ldr	r3, [pc, #148]	; (8000524 <init_task_stack+0xf0>)
 8000490:	4a2d      	ldr	r2, [pc, #180]	; (8000548 <init_task_stack+0x114>)
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
	task[4].psp_value = T4_STACK_START;
 8000494:	4b23      	ldr	r3, [pc, #140]	; (8000524 <init_task_stack+0xf0>)
 8000496:	4a2d      	ldr	r2, [pc, #180]	; (800054c <init_task_stack+0x118>)
 8000498:	641a      	str	r2, [r3, #64]	; 0x40

	uint32_t* pPSP;
	for (int i = 0; i < MAX_TASK; i++) {
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	e037      	b.n	8000510 <init_task_stack+0xdc>
		pPSP = (uint32_t*)task[i].psp_value;
 80004a0:	4a20      	ldr	r2, [pc, #128]	; (8000524 <init_task_stack+0xf0>)
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	011b      	lsls	r3, r3, #4
 80004a6:	4413      	add	r3, r2
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]

		--pPSP;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3b04      	subs	r3, #4
 80004b0:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)0x01000000;
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004b8:	601a      	str	r2, [r3, #0]

		--pPSP;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3b04      	subs	r3, #4
 80004be:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)task[i].task_handle;
 80004c0:	4a18      	ldr	r2, [pc, #96]	; (8000524 <init_task_stack+0xf0>)
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	4413      	add	r3, r2
 80004c8:	330c      	adds	r3, #12
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	461a      	mov	r2, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	601a      	str	r2, [r3, #0]

		--pPSP;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3b04      	subs	r3, #4
 80004d6:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f06f 0202 	mvn.w	r2, #2
 80004de:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	e008      	b.n	80004f8 <init_task_stack+0xc4>
			--pPSP;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3b04      	subs	r3, #4
 80004ea:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b0c      	cmp	r3, #12
 80004fc:	ddf3      	ble.n	80004e6 <init_task_stack+0xb2>
		}

		task[i].psp_value = (uint32_t)pPSP;
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	4908      	ldr	r1, [pc, #32]	; (8000524 <init_task_stack+0xf0>)
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	011b      	lsls	r3, r3, #4
 8000506:	440b      	add	r3, r1
 8000508:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASK; i++) {
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	3301      	adds	r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	2b04      	cmp	r3, #4
 8000514:	ddc4      	ble.n	80004a0 <init_task_stack+0x6c>
	}
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20000080 	.word	0x20000080
 8000528:	08000291 	.word	0x08000291
 800052c:	08000297 	.word	0x08000297
 8000530:	080002b9 	.word	0x080002b9
 8000534:	080002db 	.word	0x080002db
 8000538:	080002fd 	.word	0x080002fd
 800053c:	2001f000 	.word	0x2001f000
 8000540:	20020000 	.word	0x20020000
 8000544:	2001fc00 	.word	0x2001fc00
 8000548:	2001f800 	.word	0x2001f800
 800054c:	2001f400 	.word	0x2001f400

08000550 <main>:

int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000554:	f000 f812 	bl	800057c <enable_processor_faults>

	init_sched_stack(SCHED_STACK_START);
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <main+0x28>)
 800055a:	f7ff ff11 	bl	8000380 <init_sched_stack>

	init_task_stack();
 800055e:	f7ff ff69 	bl	8000434 <init_task_stack>

	init_led();
 8000562:	f7ff ff13 	bl	800038c <init_led>

	init_systick_timer(TICK_HZ);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 f827 	bl	80005bc <init_systick_timer>

	change_sp_to_psp();
 800056e:	f000 f86b 	bl	8000648 <change_sp_to_psp>

	task1_handler();
 8000572:	f7ff fe90 	bl	8000296 <task1_handler>

    /* Loop forever */
	for(;;);
 8000576:	e7fe      	b.n	8000576 <main+0x26>
 8000578:	2001ec00 	.word	0x2001ec00

0800057c <enable_processor_faults>:
}

void enable_processor_faults(void) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
	// Enable exceptions
	uint32_t* pSHCSR = (uint32_t*)0xE000ED24;
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <enable_processor_faults+0x3c>)
 8000584:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); //mem manage
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //bus fault
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //usage fault
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	601a      	str	r2, [r3, #0]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed24 	.word	0xe000ed24

080005bc <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz) {
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uint32_t count_value = (SYSTICK_TIME / TICK_HZ) - 1;
 80005c4:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80005c8:	617b      	str	r3, [r7, #20]

	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <init_systick_timer+0x60>)
 80005cc:	613b      	str	r3, [r7, #16]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <init_systick_timer+0x64>)
 80005d0:	60fb      	str	r3, [r7, #12]

	*pSRVR &= ~(0x00FFFFFF);
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	601a      	str	r2, [r3, #0]
	*pSRVR |= count_value;
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	431a      	orrs	r2, r3
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 1);
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f043 0202 	orr.w	r2, r3, #2
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f043 0204 	orr.w	r2, r3, #4
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 0);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f043 0201 	orr.w	r2, r3, #1
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	601a      	str	r2, [r3, #0]

}
 800060e:	bf00      	nop
 8000610:	371c      	adds	r7, #28
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000e014 	.word	0xe000e014
 8000620:	e000e010 	.word	0xe000e010

08000624 <get_psp_value>:

uint32_t get_psp_value(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	return task[current_task].psp_value;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <get_psp_value+0x1c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <get_psp_value+0x20>)
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	4413      	add	r3, r2
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000080 	.word	0x20000080

08000648 <change_sp_to_psp>:

__attribute__((naked)) void change_sp_to_psp(void) {
	__asm volatile("PUSH {LR}");
 8000648:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 800064a:	f7ff ffeb 	bl	8000624 <get_psp_value>
	__asm volatile("MSR PSP, R0");
 800064e:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000652:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("MOV R0, #0x02");
 8000656:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 800065a:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800065e:	4770      	bx	lr
}
 8000660:	bf00      	nop
	...

08000664 <save_psp_value>:

void save_psp_value(uint32_t psp_value) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	task[current_task].psp_value = psp_value;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <save_psp_value+0x24>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <save_psp_value+0x28>)
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	4413      	add	r3, r2
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000000 	.word	0x20000000
 800068c:	20000080 	.word	0x20000080

08000690 <update_next_task>:

void update_next_task(void) {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	uint8_t state = BLOCKED_STATE;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
	for (int i = 0l; i < MAX_TASK; ++i) {
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	e024      	b.n	80006ea <update_next_task+0x5a>
		current_task++;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <update_next_task+0x7c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <update_next_task+0x7c>)
 80006aa:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASK;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <update_next_task+0x7c>)
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <update_next_task+0x80>)
 80006b2:	fba3 1302 	umull	r1, r3, r3, r2
 80006b6:	0899      	lsrs	r1, r3, #2
 80006b8:	460b      	mov	r3, r1
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	440b      	add	r3, r1
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <update_next_task+0x7c>)
 80006c4:	701a      	strb	r2, [r3, #0]
		state = task[current_task].task_status;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <update_next_task+0x7c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <update_next_task+0x84>)
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	4413      	add	r3, r2
 80006d0:	3308      	adds	r3, #8
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	71fb      	strb	r3, [r7, #7]
		if (state && current_task)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <update_next_task+0x54>
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <update_next_task+0x7c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d106      	bne.n	80006f2 <update_next_task+0x62>
	for (int i = 0l; i < MAX_TASK; ++i) {
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	ddd7      	ble.n	80006a0 <update_next_task+0x10>
 80006f0:	e000      	b.n	80006f4 <update_next_task+0x64>
			break;
 80006f2:	bf00      	nop
	}

	if (!state)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d102      	bne.n	8000700 <update_next_task+0x70>
		current_task = 0;
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <update_next_task+0x7c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	20000000 	.word	0x20000000
 8000710:	cccccccd 	.word	0xcccccccd
 8000714:	20000080 	.word	0x20000080

08000718 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
	gtick_count++;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SysTick_Handler+0x70>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a18      	ldr	r2, [pc, #96]	; (8000788 <SysTick_Handler+0x70>)
 8000726:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < MAX_TASK; ++i) {
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	e01b      	b.n	8000766 <SysTick_Handler+0x4e>
		if (task[i].task_status == BLOCKED_STATE) {
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <SysTick_Handler+0x74>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4413      	add	r3, r2
 8000736:	3308      	adds	r3, #8
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d110      	bne.n	8000760 <SysTick_Handler+0x48>
			if (task[i].block_count == gtick_count)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <SysTick_Handler+0x74>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	4413      	add	r3, r2
 8000746:	3304      	adds	r3, #4
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SysTick_Handler+0x70>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d106      	bne.n	8000760 <SysTick_Handler+0x48>
				task[i].task_status = RUNNING_STATE;
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <SysTick_Handler+0x74>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < MAX_TASK; ++i) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b04      	cmp	r3, #4
 800076a:	dde0      	ble.n	800072e <SysTick_Handler+0x16>
		}
	}

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <SysTick_Handler+0x78>)
 800076e:	603b      	str	r3, [r7, #0]

	*pICSR |= (1 << 28);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	601a      	str	r2, [r3, #0]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	2000007c 	.word	0x2000007c
 800078c:	20000080 	.word	0x20000080
 8000790:	e000ed04 	.word	0xe000ed04

08000794 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void) {
	/*Save context of current task */
	//1. Get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 8000794:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2
	__asm volatile("STMDB R0!,{R4-R11}");
 8000798:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}"); //Push original LR to avoid corruption
 800079c:	b500      	push	{lr}
	//3. Save current value of PSP
	__asm volatile("BL save_psp_value");
 800079e:	f7ff ff61 	bl	8000664 <save_psp_value>

	/*Retrieve the context of next task */
	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 80007a2:	f7ff ff75 	bl	8000690 <update_next_task>
	//2. Get its past PSP value
	__asm volatile("BL get_psp_value");
 80007a6:	f7ff ff3d 	bl	8000624 <get_psp_value>
	//3. Using that PSP retrieve SF2
	__asm volatile("LDMIA R0!, {R4-R11}");
 80007aa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. Update PSP and exit
	__asm volatile("MSR PSP, R0");
 80007ae:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");	//Pop original LR saved
 80007b2:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80007b6:	4770      	bx	lr
}
 80007b8:	bf00      	nop
	...

080007bc <HardFault_Handler>:

void HardFault_Handler(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	printf("Hard Fault");
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <HardFault_Handler+0xc>)
 80007c2:	f000 f9d3 	bl	8000b6c <iprintf>
	while(1);
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0xa>
 80007c8:	08001870 	.word	0x08001870

080007cc <MemManage_Handler>:
}

void MemManage_Handler(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	printf("Memory Management Fault");
 80007d0:	4801      	ldr	r0, [pc, #4]	; (80007d8 <MemManage_Handler+0xc>)
 80007d2:	f000 f9cb 	bl	8000b6c <iprintf>
	while(1);
 80007d6:	e7fe      	b.n	80007d6 <MemManage_Handler+0xa>
 80007d8:	0800187c 	.word	0x0800187c

080007dc <BusFault_Handler>:
}

void BusFault_Handler(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	printf("Bus Fault");
 80007e0:	4801      	ldr	r0, [pc, #4]	; (80007e8 <BusFault_Handler+0xc>)
 80007e2:	f000 f9c3 	bl	8000b6c <iprintf>
	while(1);
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0xa>
 80007e8:	08001894 	.word	0x08001894

080007ec <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	printf("Usage Fault");
 80007f0:	4801      	ldr	r0, [pc, #4]	; (80007f8 <UsageFault_Handler+0xc>)
 80007f2:	f000 f9bb 	bl	8000b6c <iprintf>
	while(1);
 80007f6:	e7fe      	b.n	80007f6 <UsageFault_Handler+0xa>
 80007f8:	080018a0 	.word	0x080018a0

080007fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <ITM_SendChar+0x48>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <ITM_SendChar+0x48>)
 800080c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000810:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <ITM_SendChar+0x4c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <ITM_SendChar+0x4c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800081e:	bf00      	nop
 8000820:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800082e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	6013      	str	r3, [r2, #0]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000edfc 	.word	0xe000edfc
 8000848:	e0000e00 	.word	0xe0000e00

0800084c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e00a      	b.n	8000874 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800085e:	f3af 8000 	nop.w
 8000862:	4601      	mov	r1, r0
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf0      	blt.n	800085e <_read+0x12>
  }

  return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e009      	b.n	80008ac <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffab 	bl	80007fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbf1      	blt.n	8000898 <_write+0x12>
  }
  return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <_close>:

int _close(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e6:	605a      	str	r2, [r3, #4]
  return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_isatty>:

int _isatty(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f000 f9ac 	bl	8000cb4 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20020000 	.word	0x20020000
 8000988:	00000400 	.word	0x00000400
 800098c:	200000d0 	.word	0x200000d0
 8000990:	20000220 	.word	0x20000220

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000998:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c2:	f000 f97d 	bl	8000cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fdc3 	bl	8000550 <main>

080009ca <LoopForever>:

LoopForever:
  b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009d8:	080018e8 	.word	0x080018e8
  ldr r2, =_sbss
 80009dc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009e0:	20000220 	.word	0x20000220

080009e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <std>:
 80009e8:	2300      	movs	r3, #0
 80009ea:	b510      	push	{r4, lr}
 80009ec:	4604      	mov	r4, r0
 80009ee:	e9c0 3300 	strd	r3, r3, [r0]
 80009f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009f6:	6083      	str	r3, [r0, #8]
 80009f8:	8181      	strh	r1, [r0, #12]
 80009fa:	6643      	str	r3, [r0, #100]	; 0x64
 80009fc:	81c2      	strh	r2, [r0, #14]
 80009fe:	6183      	str	r3, [r0, #24]
 8000a00:	4619      	mov	r1, r3
 8000a02:	2208      	movs	r2, #8
 8000a04:	305c      	adds	r0, #92	; 0x5c
 8000a06:	f000 f906 	bl	8000c16 <memset>
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <std+0x58>)
 8000a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <std+0x5c>)
 8000a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <std+0x60>)
 8000a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <std+0x64>)
 8000a18:	6323      	str	r3, [r4, #48]	; 0x30
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <std+0x68>)
 8000a1c:	6224      	str	r4, [r4, #32]
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	d006      	beq.n	8000a30 <std+0x48>
 8000a22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000a26:	4294      	cmp	r4, r2
 8000a28:	d002      	beq.n	8000a30 <std+0x48>
 8000a2a:	33d0      	adds	r3, #208	; 0xd0
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	d105      	bne.n	8000a3c <std+0x54>
 8000a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a38:	f000 b966 	b.w	8000d08 <__retarget_lock_init_recursive>
 8000a3c:	bd10      	pop	{r4, pc}
 8000a3e:	bf00      	nop
 8000a40:	08000b91 	.word	0x08000b91
 8000a44:	08000bb3 	.word	0x08000bb3
 8000a48:	08000beb 	.word	0x08000beb
 8000a4c:	08000c0f 	.word	0x08000c0f
 8000a50:	200000d4 	.word	0x200000d4

08000a54 <stdio_exit_handler>:
 8000a54:	4a02      	ldr	r2, [pc, #8]	; (8000a60 <stdio_exit_handler+0xc>)
 8000a56:	4903      	ldr	r1, [pc, #12]	; (8000a64 <stdio_exit_handler+0x10>)
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <stdio_exit_handler+0x14>)
 8000a5a:	f000 b869 	b.w	8000b30 <_fwalk_sglue>
 8000a5e:	bf00      	nop
 8000a60:	20000004 	.word	0x20000004
 8000a64:	080015b5 	.word	0x080015b5
 8000a68:	20000010 	.word	0x20000010

08000a6c <cleanup_stdio>:
 8000a6c:	6841      	ldr	r1, [r0, #4]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <cleanup_stdio+0x34>)
 8000a70:	4299      	cmp	r1, r3
 8000a72:	b510      	push	{r4, lr}
 8000a74:	4604      	mov	r4, r0
 8000a76:	d001      	beq.n	8000a7c <cleanup_stdio+0x10>
 8000a78:	f000 fd9c 	bl	80015b4 <_fflush_r>
 8000a7c:	68a1      	ldr	r1, [r4, #8]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <cleanup_stdio+0x38>)
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d002      	beq.n	8000a8a <cleanup_stdio+0x1e>
 8000a84:	4620      	mov	r0, r4
 8000a86:	f000 fd95 	bl	80015b4 <_fflush_r>
 8000a8a:	68e1      	ldr	r1, [r4, #12]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <cleanup_stdio+0x3c>)
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d004      	beq.n	8000a9c <cleanup_stdio+0x30>
 8000a92:	4620      	mov	r0, r4
 8000a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a98:	f000 bd8c 	b.w	80015b4 <_fflush_r>
 8000a9c:	bd10      	pop	{r4, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000d4 	.word	0x200000d4
 8000aa4:	2000013c 	.word	0x2000013c
 8000aa8:	200001a4 	.word	0x200001a4

08000aac <global_stdio_init.part.0>:
 8000aac:	b510      	push	{r4, lr}
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <global_stdio_init.part.0+0x30>)
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <global_stdio_init.part.0+0x34>)
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <global_stdio_init.part.0+0x38>)
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2104      	movs	r1, #4
 8000abc:	f7ff ff94 	bl	80009e8 <std>
 8000ac0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2109      	movs	r1, #9
 8000ac8:	f7ff ff8e 	bl	80009e8 <std>
 8000acc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad6:	2112      	movs	r1, #18
 8000ad8:	f7ff bf86 	b.w	80009e8 <std>
 8000adc:	2000020c 	.word	0x2000020c
 8000ae0:	200000d4 	.word	0x200000d4
 8000ae4:	08000a55 	.word	0x08000a55

08000ae8 <__sfp_lock_acquire>:
 8000ae8:	4801      	ldr	r0, [pc, #4]	; (8000af0 <__sfp_lock_acquire+0x8>)
 8000aea:	f000 b90e 	b.w	8000d0a <__retarget_lock_acquire_recursive>
 8000aee:	bf00      	nop
 8000af0:	20000215 	.word	0x20000215

08000af4 <__sfp_lock_release>:
 8000af4:	4801      	ldr	r0, [pc, #4]	; (8000afc <__sfp_lock_release+0x8>)
 8000af6:	f000 b909 	b.w	8000d0c <__retarget_lock_release_recursive>
 8000afa:	bf00      	nop
 8000afc:	20000215 	.word	0x20000215

08000b00 <__sinit>:
 8000b00:	b510      	push	{r4, lr}
 8000b02:	4604      	mov	r4, r0
 8000b04:	f7ff fff0 	bl	8000ae8 <__sfp_lock_acquire>
 8000b08:	6a23      	ldr	r3, [r4, #32]
 8000b0a:	b11b      	cbz	r3, 8000b14 <__sinit+0x14>
 8000b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b10:	f7ff bff0 	b.w	8000af4 <__sfp_lock_release>
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__sinit+0x28>)
 8000b16:	6223      	str	r3, [r4, #32]
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__sinit+0x2c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f5      	bne.n	8000b0c <__sinit+0xc>
 8000b20:	f7ff ffc4 	bl	8000aac <global_stdio_init.part.0>
 8000b24:	e7f2      	b.n	8000b0c <__sinit+0xc>
 8000b26:	bf00      	nop
 8000b28:	08000a6d 	.word	0x08000a6d
 8000b2c:	2000020c 	.word	0x2000020c

08000b30 <_fwalk_sglue>:
 8000b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b34:	4607      	mov	r7, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	4614      	mov	r4, r2
 8000b3a:	2600      	movs	r6, #0
 8000b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b40:	f1b9 0901 	subs.w	r9, r9, #1
 8000b44:	d505      	bpl.n	8000b52 <_fwalk_sglue+0x22>
 8000b46:	6824      	ldr	r4, [r4, #0]
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d1f7      	bne.n	8000b3c <_fwalk_sglue+0xc>
 8000b4c:	4630      	mov	r0, r6
 8000b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b52:	89ab      	ldrh	r3, [r5, #12]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d907      	bls.n	8000b68 <_fwalk_sglue+0x38>
 8000b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	d003      	beq.n	8000b68 <_fwalk_sglue+0x38>
 8000b60:	4629      	mov	r1, r5
 8000b62:	4638      	mov	r0, r7
 8000b64:	47c0      	blx	r8
 8000b66:	4306      	orrs	r6, r0
 8000b68:	3568      	adds	r5, #104	; 0x68
 8000b6a:	e7e9      	b.n	8000b40 <_fwalk_sglue+0x10>

08000b6c <iprintf>:
 8000b6c:	b40f      	push	{r0, r1, r2, r3}
 8000b6e:	b507      	push	{r0, r1, r2, lr}
 8000b70:	4906      	ldr	r1, [pc, #24]	; (8000b8c <iprintf+0x20>)
 8000b72:	ab04      	add	r3, sp, #16
 8000b74:	6808      	ldr	r0, [r1, #0]
 8000b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b7a:	6881      	ldr	r1, [r0, #8]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	f000 f9e9 	bl	8000f54 <_vfiprintf_r>
 8000b82:	b003      	add	sp, #12
 8000b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr
 8000b8c:	2000005c 	.word	0x2000005c

08000b90 <__sread>:
 8000b90:	b510      	push	{r4, lr}
 8000b92:	460c      	mov	r4, r1
 8000b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b98:	f000 f868 	bl	8000c6c <_read_r>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	bfab      	itete	ge
 8000ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8000ba4:	181b      	addge	r3, r3, r0
 8000ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000baa:	bfac      	ite	ge
 8000bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8000bae:	81a3      	strhlt	r3, [r4, #12]
 8000bb0:	bd10      	pop	{r4, pc}

08000bb2 <__swrite>:
 8000bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb6:	461f      	mov	r7, r3
 8000bb8:	898b      	ldrh	r3, [r1, #12]
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	4605      	mov	r5, r0
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	4616      	mov	r6, r2
 8000bc2:	d505      	bpl.n	8000bd0 <__swrite+0x1e>
 8000bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc8:	2302      	movs	r3, #2
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f000 f83c 	bl	8000c48 <_lseek_r>
 8000bd0:	89a3      	ldrh	r3, [r4, #12]
 8000bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bda:	81a3      	strh	r3, [r4, #12]
 8000bdc:	4632      	mov	r2, r6
 8000bde:	463b      	mov	r3, r7
 8000be0:	4628      	mov	r0, r5
 8000be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000be6:	f000 b853 	b.w	8000c90 <_write_r>

08000bea <__sseek>:
 8000bea:	b510      	push	{r4, lr}
 8000bec:	460c      	mov	r4, r1
 8000bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf2:	f000 f829 	bl	8000c48 <_lseek_r>
 8000bf6:	1c43      	adds	r3, r0, #1
 8000bf8:	89a3      	ldrh	r3, [r4, #12]
 8000bfa:	bf15      	itete	ne
 8000bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c06:	81a3      	strheq	r3, [r4, #12]
 8000c08:	bf18      	it	ne
 8000c0a:	81a3      	strhne	r3, [r4, #12]
 8000c0c:	bd10      	pop	{r4, pc}

08000c0e <__sclose>:
 8000c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c12:	f000 b809 	b.w	8000c28 <_close_r>

08000c16 <memset>:
 8000c16:	4402      	add	r2, r0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <memset+0xa>
 8000c1e:	4770      	bx	lr
 8000c20:	f803 1b01 	strb.w	r1, [r3], #1
 8000c24:	e7f9      	b.n	8000c1a <memset+0x4>
	...

08000c28 <_close_r>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	4d06      	ldr	r5, [pc, #24]	; (8000c44 <_close_r+0x1c>)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4608      	mov	r0, r1
 8000c32:	602b      	str	r3, [r5, #0]
 8000c34:	f7ff fe43 	bl	80008be <_close>
 8000c38:	1c43      	adds	r3, r0, #1
 8000c3a:	d102      	bne.n	8000c42 <_close_r+0x1a>
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	b103      	cbz	r3, 8000c42 <_close_r+0x1a>
 8000c40:	6023      	str	r3, [r4, #0]
 8000c42:	bd38      	pop	{r3, r4, r5, pc}
 8000c44:	20000210 	.word	0x20000210

08000c48 <_lseek_r>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4d07      	ldr	r5, [pc, #28]	; (8000c68 <_lseek_r+0x20>)
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	4611      	mov	r1, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	602a      	str	r2, [r5, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	f7ff fe58 	bl	800090c <_lseek>
 8000c5c:	1c43      	adds	r3, r0, #1
 8000c5e:	d102      	bne.n	8000c66 <_lseek_r+0x1e>
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	b103      	cbz	r3, 8000c66 <_lseek_r+0x1e>
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	bd38      	pop	{r3, r4, r5, pc}
 8000c68:	20000210 	.word	0x20000210

08000c6c <_read_r>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4d07      	ldr	r5, [pc, #28]	; (8000c8c <_read_r+0x20>)
 8000c70:	4604      	mov	r4, r0
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	2200      	movs	r2, #0
 8000c78:	602a      	str	r2, [r5, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f7ff fde6 	bl	800084c <_read>
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	d102      	bne.n	8000c8a <_read_r+0x1e>
 8000c84:	682b      	ldr	r3, [r5, #0]
 8000c86:	b103      	cbz	r3, 8000c8a <_read_r+0x1e>
 8000c88:	6023      	str	r3, [r4, #0]
 8000c8a:	bd38      	pop	{r3, r4, r5, pc}
 8000c8c:	20000210 	.word	0x20000210

08000c90 <_write_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4d07      	ldr	r5, [pc, #28]	; (8000cb0 <_write_r+0x20>)
 8000c94:	4604      	mov	r4, r0
 8000c96:	4608      	mov	r0, r1
 8000c98:	4611      	mov	r1, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	602a      	str	r2, [r5, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f7ff fdf1 	bl	8000886 <_write>
 8000ca4:	1c43      	adds	r3, r0, #1
 8000ca6:	d102      	bne.n	8000cae <_write_r+0x1e>
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	b103      	cbz	r3, 8000cae <_write_r+0x1e>
 8000cac:	6023      	str	r3, [r4, #0]
 8000cae:	bd38      	pop	{r3, r4, r5, pc}
 8000cb0:	20000210 	.word	0x20000210

08000cb4 <__errno>:
 8000cb4:	4b01      	ldr	r3, [pc, #4]	; (8000cbc <__errno+0x8>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000005c 	.word	0x2000005c

08000cc0 <__libc_init_array>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	4d0d      	ldr	r5, [pc, #52]	; (8000cf8 <__libc_init_array+0x38>)
 8000cc4:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <__libc_init_array+0x3c>)
 8000cc6:	1b64      	subs	r4, r4, r5
 8000cc8:	10a4      	asrs	r4, r4, #2
 8000cca:	2600      	movs	r6, #0
 8000ccc:	42a6      	cmp	r6, r4
 8000cce:	d109      	bne.n	8000ce4 <__libc_init_array+0x24>
 8000cd0:	4d0b      	ldr	r5, [pc, #44]	; (8000d00 <__libc_init_array+0x40>)
 8000cd2:	4c0c      	ldr	r4, [pc, #48]	; (8000d04 <__libc_init_array+0x44>)
 8000cd4:	f000 fdc0 	bl	8001858 <_init>
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	10a4      	asrs	r4, r4, #2
 8000cdc:	2600      	movs	r6, #0
 8000cde:	42a6      	cmp	r6, r4
 8000ce0:	d105      	bne.n	8000cee <__libc_init_array+0x2e>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce8:	4798      	blx	r3
 8000cea:	3601      	adds	r6, #1
 8000cec:	e7ee      	b.n	8000ccc <__libc_init_array+0xc>
 8000cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf2:	4798      	blx	r3
 8000cf4:	3601      	adds	r6, #1
 8000cf6:	e7f2      	b.n	8000cde <__libc_init_array+0x1e>
 8000cf8:	080018e0 	.word	0x080018e0
 8000cfc:	080018e0 	.word	0x080018e0
 8000d00:	080018e0 	.word	0x080018e0
 8000d04:	080018e4 	.word	0x080018e4

08000d08 <__retarget_lock_init_recursive>:
 8000d08:	4770      	bx	lr

08000d0a <__retarget_lock_acquire_recursive>:
 8000d0a:	4770      	bx	lr

08000d0c <__retarget_lock_release_recursive>:
 8000d0c:	4770      	bx	lr
	...

08000d10 <_free_r>:
 8000d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d044      	beq.n	8000da0 <_free_r+0x90>
 8000d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d1a:	9001      	str	r0, [sp, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8000d22:	bfb8      	it	lt
 8000d24:	18e4      	addlt	r4, r4, r3
 8000d26:	f000 f8df 	bl	8000ee8 <__malloc_lock>
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <_free_r+0x94>)
 8000d2c:	9801      	ldr	r0, [sp, #4]
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	b933      	cbnz	r3, 8000d40 <_free_r+0x30>
 8000d32:	6063      	str	r3, [r4, #4]
 8000d34:	6014      	str	r4, [r2, #0]
 8000d36:	b003      	add	sp, #12
 8000d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d3c:	f000 b8da 	b.w	8000ef4 <__malloc_unlock>
 8000d40:	42a3      	cmp	r3, r4
 8000d42:	d908      	bls.n	8000d56 <_free_r+0x46>
 8000d44:	6825      	ldr	r5, [r4, #0]
 8000d46:	1961      	adds	r1, r4, r5
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf01      	itttt	eq
 8000d4c:	6819      	ldreq	r1, [r3, #0]
 8000d4e:	685b      	ldreq	r3, [r3, #4]
 8000d50:	1949      	addeq	r1, r1, r5
 8000d52:	6021      	streq	r1, [r4, #0]
 8000d54:	e7ed      	b.n	8000d32 <_free_r+0x22>
 8000d56:	461a      	mov	r2, r3
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	b10b      	cbz	r3, 8000d60 <_free_r+0x50>
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d9fa      	bls.n	8000d56 <_free_r+0x46>
 8000d60:	6811      	ldr	r1, [r2, #0]
 8000d62:	1855      	adds	r5, r2, r1
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	d10b      	bne.n	8000d80 <_free_r+0x70>
 8000d68:	6824      	ldr	r4, [r4, #0]
 8000d6a:	4421      	add	r1, r4
 8000d6c:	1854      	adds	r4, r2, r1
 8000d6e:	42a3      	cmp	r3, r4
 8000d70:	6011      	str	r1, [r2, #0]
 8000d72:	d1e0      	bne.n	8000d36 <_free_r+0x26>
 8000d74:	681c      	ldr	r4, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	6053      	str	r3, [r2, #4]
 8000d7a:	440c      	add	r4, r1
 8000d7c:	6014      	str	r4, [r2, #0]
 8000d7e:	e7da      	b.n	8000d36 <_free_r+0x26>
 8000d80:	d902      	bls.n	8000d88 <_free_r+0x78>
 8000d82:	230c      	movs	r3, #12
 8000d84:	6003      	str	r3, [r0, #0]
 8000d86:	e7d6      	b.n	8000d36 <_free_r+0x26>
 8000d88:	6825      	ldr	r5, [r4, #0]
 8000d8a:	1961      	adds	r1, r4, r5
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	bf04      	itt	eq
 8000d90:	6819      	ldreq	r1, [r3, #0]
 8000d92:	685b      	ldreq	r3, [r3, #4]
 8000d94:	6063      	str	r3, [r4, #4]
 8000d96:	bf04      	itt	eq
 8000d98:	1949      	addeq	r1, r1, r5
 8000d9a:	6021      	streq	r1, [r4, #0]
 8000d9c:	6054      	str	r4, [r2, #4]
 8000d9e:	e7ca      	b.n	8000d36 <_free_r+0x26>
 8000da0:	b003      	add	sp, #12
 8000da2:	bd30      	pop	{r4, r5, pc}
 8000da4:	20000218 	.word	0x20000218

08000da8 <sbrk_aligned>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	4e0e      	ldr	r6, [pc, #56]	; (8000de4 <sbrk_aligned+0x3c>)
 8000dac:	460c      	mov	r4, r1
 8000dae:	6831      	ldr	r1, [r6, #0]
 8000db0:	4605      	mov	r5, r0
 8000db2:	b911      	cbnz	r1, 8000dba <sbrk_aligned+0x12>
 8000db4:	f000 fcbc 	bl	8001730 <_sbrk_r>
 8000db8:	6030      	str	r0, [r6, #0]
 8000dba:	4621      	mov	r1, r4
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f000 fcb7 	bl	8001730 <_sbrk_r>
 8000dc2:	1c43      	adds	r3, r0, #1
 8000dc4:	d00a      	beq.n	8000ddc <sbrk_aligned+0x34>
 8000dc6:	1cc4      	adds	r4, r0, #3
 8000dc8:	f024 0403 	bic.w	r4, r4, #3
 8000dcc:	42a0      	cmp	r0, r4
 8000dce:	d007      	beq.n	8000de0 <sbrk_aligned+0x38>
 8000dd0:	1a21      	subs	r1, r4, r0
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f000 fcac 	bl	8001730 <_sbrk_r>
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d101      	bne.n	8000de0 <sbrk_aligned+0x38>
 8000ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8000de0:	4620      	mov	r0, r4
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	2000021c 	.word	0x2000021c

08000de8 <_malloc_r>:
 8000de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dec:	1ccd      	adds	r5, r1, #3
 8000dee:	f025 0503 	bic.w	r5, r5, #3
 8000df2:	3508      	adds	r5, #8
 8000df4:	2d0c      	cmp	r5, #12
 8000df6:	bf38      	it	cc
 8000df8:	250c      	movcc	r5, #12
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	db01      	blt.n	8000e04 <_malloc_r+0x1c>
 8000e00:	42a9      	cmp	r1, r5
 8000e02:	d905      	bls.n	8000e10 <_malloc_r+0x28>
 8000e04:	230c      	movs	r3, #12
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	2600      	movs	r6, #0
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ee4 <_malloc_r+0xfc>
 8000e14:	f000 f868 	bl	8000ee8 <__malloc_lock>
 8000e18:	f8d8 3000 	ldr.w	r3, [r8]
 8000e1c:	461c      	mov	r4, r3
 8000e1e:	bb5c      	cbnz	r4, 8000e78 <_malloc_r+0x90>
 8000e20:	4629      	mov	r1, r5
 8000e22:	4638      	mov	r0, r7
 8000e24:	f7ff ffc0 	bl	8000da8 <sbrk_aligned>
 8000e28:	1c43      	adds	r3, r0, #1
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	d155      	bne.n	8000eda <_malloc_r+0xf2>
 8000e2e:	f8d8 4000 	ldr.w	r4, [r8]
 8000e32:	4626      	mov	r6, r4
 8000e34:	2e00      	cmp	r6, #0
 8000e36:	d145      	bne.n	8000ec4 <_malloc_r+0xdc>
 8000e38:	2c00      	cmp	r4, #0
 8000e3a:	d048      	beq.n	8000ece <_malloc_r+0xe6>
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	4631      	mov	r1, r6
 8000e40:	4638      	mov	r0, r7
 8000e42:	eb04 0903 	add.w	r9, r4, r3
 8000e46:	f000 fc73 	bl	8001730 <_sbrk_r>
 8000e4a:	4581      	cmp	r9, r0
 8000e4c:	d13f      	bne.n	8000ece <_malloc_r+0xe6>
 8000e4e:	6821      	ldr	r1, [r4, #0]
 8000e50:	1a6d      	subs	r5, r5, r1
 8000e52:	4629      	mov	r1, r5
 8000e54:	4638      	mov	r0, r7
 8000e56:	f7ff ffa7 	bl	8000da8 <sbrk_aligned>
 8000e5a:	3001      	adds	r0, #1
 8000e5c:	d037      	beq.n	8000ece <_malloc_r+0xe6>
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	442b      	add	r3, r5
 8000e62:	6023      	str	r3, [r4, #0]
 8000e64:	f8d8 3000 	ldr.w	r3, [r8]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d038      	beq.n	8000ede <_malloc_r+0xf6>
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	42a2      	cmp	r2, r4
 8000e70:	d12b      	bne.n	8000eca <_malloc_r+0xe2>
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	e00f      	b.n	8000e98 <_malloc_r+0xb0>
 8000e78:	6822      	ldr	r2, [r4, #0]
 8000e7a:	1b52      	subs	r2, r2, r5
 8000e7c:	d41f      	bmi.n	8000ebe <_malloc_r+0xd6>
 8000e7e:	2a0b      	cmp	r2, #11
 8000e80:	d917      	bls.n	8000eb2 <_malloc_r+0xca>
 8000e82:	1961      	adds	r1, r4, r5
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	6025      	str	r5, [r4, #0]
 8000e88:	bf18      	it	ne
 8000e8a:	6059      	strne	r1, [r3, #4]
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	bf08      	it	eq
 8000e90:	f8c8 1000 	streq.w	r1, [r8]
 8000e94:	5162      	str	r2, [r4, r5]
 8000e96:	604b      	str	r3, [r1, #4]
 8000e98:	4638      	mov	r0, r7
 8000e9a:	f104 060b 	add.w	r6, r4, #11
 8000e9e:	f000 f829 	bl	8000ef4 <__malloc_unlock>
 8000ea2:	f026 0607 	bic.w	r6, r6, #7
 8000ea6:	1d23      	adds	r3, r4, #4
 8000ea8:	1af2      	subs	r2, r6, r3
 8000eaa:	d0ae      	beq.n	8000e0a <_malloc_r+0x22>
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	50a3      	str	r3, [r4, r2]
 8000eb0:	e7ab      	b.n	8000e0a <_malloc_r+0x22>
 8000eb2:	42a3      	cmp	r3, r4
 8000eb4:	6862      	ldr	r2, [r4, #4]
 8000eb6:	d1dd      	bne.n	8000e74 <_malloc_r+0x8c>
 8000eb8:	f8c8 2000 	str.w	r2, [r8]
 8000ebc:	e7ec      	b.n	8000e98 <_malloc_r+0xb0>
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	6864      	ldr	r4, [r4, #4]
 8000ec2:	e7ac      	b.n	8000e1e <_malloc_r+0x36>
 8000ec4:	4634      	mov	r4, r6
 8000ec6:	6876      	ldr	r6, [r6, #4]
 8000ec8:	e7b4      	b.n	8000e34 <_malloc_r+0x4c>
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7cc      	b.n	8000e68 <_malloc_r+0x80>
 8000ece:	230c      	movs	r3, #12
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f000 f80e 	bl	8000ef4 <__malloc_unlock>
 8000ed8:	e797      	b.n	8000e0a <_malloc_r+0x22>
 8000eda:	6025      	str	r5, [r4, #0]
 8000edc:	e7dc      	b.n	8000e98 <_malloc_r+0xb0>
 8000ede:	605b      	str	r3, [r3, #4]
 8000ee0:	deff      	udf	#255	; 0xff
 8000ee2:	bf00      	nop
 8000ee4:	20000218 	.word	0x20000218

08000ee8 <__malloc_lock>:
 8000ee8:	4801      	ldr	r0, [pc, #4]	; (8000ef0 <__malloc_lock+0x8>)
 8000eea:	f7ff bf0e 	b.w	8000d0a <__retarget_lock_acquire_recursive>
 8000eee:	bf00      	nop
 8000ef0:	20000214 	.word	0x20000214

08000ef4 <__malloc_unlock>:
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <__malloc_unlock+0x8>)
 8000ef6:	f7ff bf09 	b.w	8000d0c <__retarget_lock_release_recursive>
 8000efa:	bf00      	nop
 8000efc:	20000214 	.word	0x20000214

08000f00 <__sfputc_r>:
 8000f00:	6893      	ldr	r3, [r2, #8]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	b410      	push	{r4}
 8000f08:	6093      	str	r3, [r2, #8]
 8000f0a:	da08      	bge.n	8000f1e <__sfputc_r+0x1e>
 8000f0c:	6994      	ldr	r4, [r2, #24]
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	db01      	blt.n	8000f16 <__sfputc_r+0x16>
 8000f12:	290a      	cmp	r1, #10
 8000f14:	d103      	bne.n	8000f1e <__sfputc_r+0x1e>
 8000f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f1a:	f000 bb73 	b.w	8001604 <__swbuf_r>
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	1c58      	adds	r0, r3, #1
 8000f22:	6010      	str	r0, [r2, #0]
 8000f24:	7019      	strb	r1, [r3, #0]
 8000f26:	4608      	mov	r0, r1
 8000f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <__sfputs_r>:
 8000f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f30:	4606      	mov	r6, r0
 8000f32:	460f      	mov	r7, r1
 8000f34:	4614      	mov	r4, r2
 8000f36:	18d5      	adds	r5, r2, r3
 8000f38:	42ac      	cmp	r4, r5
 8000f3a:	d101      	bne.n	8000f40 <__sfputs_r+0x12>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e007      	b.n	8000f50 <__sfputs_r+0x22>
 8000f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f44:	463a      	mov	r2, r7
 8000f46:	4630      	mov	r0, r6
 8000f48:	f7ff ffda 	bl	8000f00 <__sfputc_r>
 8000f4c:	1c43      	adds	r3, r0, #1
 8000f4e:	d1f3      	bne.n	8000f38 <__sfputs_r+0xa>
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f54 <_vfiprintf_r>:
 8000f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f58:	460d      	mov	r5, r1
 8000f5a:	b09d      	sub	sp, #116	; 0x74
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	4698      	mov	r8, r3
 8000f60:	4606      	mov	r6, r0
 8000f62:	b118      	cbz	r0, 8000f6c <_vfiprintf_r+0x18>
 8000f64:	6a03      	ldr	r3, [r0, #32]
 8000f66:	b90b      	cbnz	r3, 8000f6c <_vfiprintf_r+0x18>
 8000f68:	f7ff fdca 	bl	8000b00 <__sinit>
 8000f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f6e:	07d9      	lsls	r1, r3, #31
 8000f70:	d405      	bmi.n	8000f7e <_vfiprintf_r+0x2a>
 8000f72:	89ab      	ldrh	r3, [r5, #12]
 8000f74:	059a      	lsls	r2, r3, #22
 8000f76:	d402      	bmi.n	8000f7e <_vfiprintf_r+0x2a>
 8000f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f7a:	f7ff fec6 	bl	8000d0a <__retarget_lock_acquire_recursive>
 8000f7e:	89ab      	ldrh	r3, [r5, #12]
 8000f80:	071b      	lsls	r3, r3, #28
 8000f82:	d501      	bpl.n	8000f88 <_vfiprintf_r+0x34>
 8000f84:	692b      	ldr	r3, [r5, #16]
 8000f86:	b99b      	cbnz	r3, 8000fb0 <_vfiprintf_r+0x5c>
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f000 fb78 	bl	8001680 <__swsetup_r>
 8000f90:	b170      	cbz	r0, 8000fb0 <_vfiprintf_r+0x5c>
 8000f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f94:	07dc      	lsls	r4, r3, #31
 8000f96:	d504      	bpl.n	8000fa2 <_vfiprintf_r+0x4e>
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	b01d      	add	sp, #116	; 0x74
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa2:	89ab      	ldrh	r3, [r5, #12]
 8000fa4:	0598      	lsls	r0, r3, #22
 8000fa6:	d4f7      	bmi.n	8000f98 <_vfiprintf_r+0x44>
 8000fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000faa:	f7ff feaf 	bl	8000d0c <__retarget_lock_release_recursive>
 8000fae:	e7f3      	b.n	8000f98 <_vfiprintf_r+0x44>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fbe:	2330      	movs	r3, #48	; 0x30
 8000fc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001174 <_vfiprintf_r+0x220>
 8000fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fc8:	f04f 0901 	mov.w	r9, #1
 8000fcc:	4623      	mov	r3, r4
 8000fce:	469a      	mov	sl, r3
 8000fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fd4:	b10a      	cbz	r2, 8000fda <_vfiprintf_r+0x86>
 8000fd6:	2a25      	cmp	r2, #37	; 0x25
 8000fd8:	d1f9      	bne.n	8000fce <_vfiprintf_r+0x7a>
 8000fda:	ebba 0b04 	subs.w	fp, sl, r4
 8000fde:	d00b      	beq.n	8000ff8 <_vfiprintf_r+0xa4>
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f7ff ffa1 	bl	8000f2e <__sfputs_r>
 8000fec:	3001      	adds	r0, #1
 8000fee:	f000 80a9 	beq.w	8001144 <_vfiprintf_r+0x1f0>
 8000ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ff4:	445a      	add	r2, fp
 8000ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a1 	beq.w	8001144 <_vfiprintf_r+0x1f0>
 8001002:	2300      	movs	r3, #0
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800100c:	f10a 0a01 	add.w	sl, sl, #1
 8001010:	9304      	str	r3, [sp, #16]
 8001012:	9307      	str	r3, [sp, #28]
 8001014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001018:	931a      	str	r3, [sp, #104]	; 0x68
 800101a:	4654      	mov	r4, sl
 800101c:	2205      	movs	r2, #5
 800101e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001022:	4854      	ldr	r0, [pc, #336]	; (8001174 <_vfiprintf_r+0x220>)
 8001024:	f7ff f8e4 	bl	80001f0 <memchr>
 8001028:	9a04      	ldr	r2, [sp, #16]
 800102a:	b9d8      	cbnz	r0, 8001064 <_vfiprintf_r+0x110>
 800102c:	06d1      	lsls	r1, r2, #27
 800102e:	bf44      	itt	mi
 8001030:	2320      	movmi	r3, #32
 8001032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001036:	0713      	lsls	r3, r2, #28
 8001038:	bf44      	itt	mi
 800103a:	232b      	movmi	r3, #43	; 0x2b
 800103c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001040:	f89a 3000 	ldrb.w	r3, [sl]
 8001044:	2b2a      	cmp	r3, #42	; 0x2a
 8001046:	d015      	beq.n	8001074 <_vfiprintf_r+0x120>
 8001048:	9a07      	ldr	r2, [sp, #28]
 800104a:	4654      	mov	r4, sl
 800104c:	2000      	movs	r0, #0
 800104e:	f04f 0c0a 	mov.w	ip, #10
 8001052:	4621      	mov	r1, r4
 8001054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001058:	3b30      	subs	r3, #48	; 0x30
 800105a:	2b09      	cmp	r3, #9
 800105c:	d94d      	bls.n	80010fa <_vfiprintf_r+0x1a6>
 800105e:	b1b0      	cbz	r0, 800108e <_vfiprintf_r+0x13a>
 8001060:	9207      	str	r2, [sp, #28]
 8001062:	e014      	b.n	800108e <_vfiprintf_r+0x13a>
 8001064:	eba0 0308 	sub.w	r3, r0, r8
 8001068:	fa09 f303 	lsl.w	r3, r9, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	9304      	str	r3, [sp, #16]
 8001070:	46a2      	mov	sl, r4
 8001072:	e7d2      	b.n	800101a <_vfiprintf_r+0xc6>
 8001074:	9b03      	ldr	r3, [sp, #12]
 8001076:	1d19      	adds	r1, r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	9103      	str	r1, [sp, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bfbb      	ittet	lt
 8001080:	425b      	neglt	r3, r3
 8001082:	f042 0202 	orrlt.w	r2, r2, #2
 8001086:	9307      	strge	r3, [sp, #28]
 8001088:	9307      	strlt	r3, [sp, #28]
 800108a:	bfb8      	it	lt
 800108c:	9204      	strlt	r2, [sp, #16]
 800108e:	7823      	ldrb	r3, [r4, #0]
 8001090:	2b2e      	cmp	r3, #46	; 0x2e
 8001092:	d10c      	bne.n	80010ae <_vfiprintf_r+0x15a>
 8001094:	7863      	ldrb	r3, [r4, #1]
 8001096:	2b2a      	cmp	r3, #42	; 0x2a
 8001098:	d134      	bne.n	8001104 <_vfiprintf_r+0x1b0>
 800109a:	9b03      	ldr	r3, [sp, #12]
 800109c:	1d1a      	adds	r2, r3, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	9203      	str	r2, [sp, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bfb8      	it	lt
 80010a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80010aa:	3402      	adds	r4, #2
 80010ac:	9305      	str	r3, [sp, #20]
 80010ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001184 <_vfiprintf_r+0x230>
 80010b2:	7821      	ldrb	r1, [r4, #0]
 80010b4:	2203      	movs	r2, #3
 80010b6:	4650      	mov	r0, sl
 80010b8:	f7ff f89a 	bl	80001f0 <memchr>
 80010bc:	b138      	cbz	r0, 80010ce <_vfiprintf_r+0x17a>
 80010be:	9b04      	ldr	r3, [sp, #16]
 80010c0:	eba0 000a 	sub.w	r0, r0, sl
 80010c4:	2240      	movs	r2, #64	; 0x40
 80010c6:	4082      	lsls	r2, r0
 80010c8:	4313      	orrs	r3, r2
 80010ca:	3401      	adds	r4, #1
 80010cc:	9304      	str	r3, [sp, #16]
 80010ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010d2:	4829      	ldr	r0, [pc, #164]	; (8001178 <_vfiprintf_r+0x224>)
 80010d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010d8:	2206      	movs	r2, #6
 80010da:	f7ff f889 	bl	80001f0 <memchr>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d03f      	beq.n	8001162 <_vfiprintf_r+0x20e>
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <_vfiprintf_r+0x228>)
 80010e4:	bb1b      	cbnz	r3, 800112e <_vfiprintf_r+0x1da>
 80010e6:	9b03      	ldr	r3, [sp, #12]
 80010e8:	3307      	adds	r3, #7
 80010ea:	f023 0307 	bic.w	r3, r3, #7
 80010ee:	3308      	adds	r3, #8
 80010f0:	9303      	str	r3, [sp, #12]
 80010f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010f4:	443b      	add	r3, r7
 80010f6:	9309      	str	r3, [sp, #36]	; 0x24
 80010f8:	e768      	b.n	8000fcc <_vfiprintf_r+0x78>
 80010fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80010fe:	460c      	mov	r4, r1
 8001100:	2001      	movs	r0, #1
 8001102:	e7a6      	b.n	8001052 <_vfiprintf_r+0xfe>
 8001104:	2300      	movs	r3, #0
 8001106:	3401      	adds	r4, #1
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0c0a 	mov.w	ip, #10
 8001110:	4620      	mov	r0, r4
 8001112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001116:	3a30      	subs	r2, #48	; 0x30
 8001118:	2a09      	cmp	r2, #9
 800111a:	d903      	bls.n	8001124 <_vfiprintf_r+0x1d0>
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0c6      	beq.n	80010ae <_vfiprintf_r+0x15a>
 8001120:	9105      	str	r1, [sp, #20]
 8001122:	e7c4      	b.n	80010ae <_vfiprintf_r+0x15a>
 8001124:	fb0c 2101 	mla	r1, ip, r1, r2
 8001128:	4604      	mov	r4, r0
 800112a:	2301      	movs	r3, #1
 800112c:	e7f0      	b.n	8001110 <_vfiprintf_r+0x1bc>
 800112e:	ab03      	add	r3, sp, #12
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	462a      	mov	r2, r5
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <_vfiprintf_r+0x22c>)
 8001136:	a904      	add	r1, sp, #16
 8001138:	4630      	mov	r0, r6
 800113a:	f3af 8000 	nop.w
 800113e:	4607      	mov	r7, r0
 8001140:	1c78      	adds	r0, r7, #1
 8001142:	d1d6      	bne.n	80010f2 <_vfiprintf_r+0x19e>
 8001144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001146:	07d9      	lsls	r1, r3, #31
 8001148:	d405      	bmi.n	8001156 <_vfiprintf_r+0x202>
 800114a:	89ab      	ldrh	r3, [r5, #12]
 800114c:	059a      	lsls	r2, r3, #22
 800114e:	d402      	bmi.n	8001156 <_vfiprintf_r+0x202>
 8001150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001152:	f7ff fddb 	bl	8000d0c <__retarget_lock_release_recursive>
 8001156:	89ab      	ldrh	r3, [r5, #12]
 8001158:	065b      	lsls	r3, r3, #25
 800115a:	f53f af1d 	bmi.w	8000f98 <_vfiprintf_r+0x44>
 800115e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001160:	e71c      	b.n	8000f9c <_vfiprintf_r+0x48>
 8001162:	ab03      	add	r3, sp, #12
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	462a      	mov	r2, r5
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <_vfiprintf_r+0x22c>)
 800116a:	a904      	add	r1, sp, #16
 800116c:	4630      	mov	r0, r6
 800116e:	f000 f879 	bl	8001264 <_printf_i>
 8001172:	e7e4      	b.n	800113e <_vfiprintf_r+0x1ea>
 8001174:	080018ac 	.word	0x080018ac
 8001178:	080018b6 	.word	0x080018b6
 800117c:	00000000 	.word	0x00000000
 8001180:	08000f2f 	.word	0x08000f2f
 8001184:	080018b2 	.word	0x080018b2

08001188 <_printf_common>:
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	4616      	mov	r6, r2
 800118e:	4699      	mov	r9, r3
 8001190:	688a      	ldr	r2, [r1, #8]
 8001192:	690b      	ldr	r3, [r1, #16]
 8001194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001198:	4293      	cmp	r3, r2
 800119a:	bfb8      	it	lt
 800119c:	4613      	movlt	r3, r2
 800119e:	6033      	str	r3, [r6, #0]
 80011a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80011a4:	4607      	mov	r7, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	b10a      	cbz	r2, 80011ae <_printf_common+0x26>
 80011aa:	3301      	adds	r3, #1
 80011ac:	6033      	str	r3, [r6, #0]
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	0699      	lsls	r1, r3, #26
 80011b2:	bf42      	ittt	mi
 80011b4:	6833      	ldrmi	r3, [r6, #0]
 80011b6:	3302      	addmi	r3, #2
 80011b8:	6033      	strmi	r3, [r6, #0]
 80011ba:	6825      	ldr	r5, [r4, #0]
 80011bc:	f015 0506 	ands.w	r5, r5, #6
 80011c0:	d106      	bne.n	80011d0 <_printf_common+0x48>
 80011c2:	f104 0a19 	add.w	sl, r4, #25
 80011c6:	68e3      	ldr	r3, [r4, #12]
 80011c8:	6832      	ldr	r2, [r6, #0]
 80011ca:	1a9b      	subs	r3, r3, r2
 80011cc:	42ab      	cmp	r3, r5
 80011ce:	dc26      	bgt.n	800121e <_printf_common+0x96>
 80011d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011d4:	1e13      	subs	r3, r2, #0
 80011d6:	6822      	ldr	r2, [r4, #0]
 80011d8:	bf18      	it	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	0692      	lsls	r2, r2, #26
 80011de:	d42b      	bmi.n	8001238 <_printf_common+0xb0>
 80011e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011e4:	4649      	mov	r1, r9
 80011e6:	4638      	mov	r0, r7
 80011e8:	47c0      	blx	r8
 80011ea:	3001      	adds	r0, #1
 80011ec:	d01e      	beq.n	800122c <_printf_common+0xa4>
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	6922      	ldr	r2, [r4, #16]
 80011f2:	f003 0306 	and.w	r3, r3, #6
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf02      	ittt	eq
 80011fa:	68e5      	ldreq	r5, [r4, #12]
 80011fc:	6833      	ldreq	r3, [r6, #0]
 80011fe:	1aed      	subeq	r5, r5, r3
 8001200:	68a3      	ldr	r3, [r4, #8]
 8001202:	bf0c      	ite	eq
 8001204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001208:	2500      	movne	r5, #0
 800120a:	4293      	cmp	r3, r2
 800120c:	bfc4      	itt	gt
 800120e:	1a9b      	subgt	r3, r3, r2
 8001210:	18ed      	addgt	r5, r5, r3
 8001212:	2600      	movs	r6, #0
 8001214:	341a      	adds	r4, #26
 8001216:	42b5      	cmp	r5, r6
 8001218:	d11a      	bne.n	8001250 <_printf_common+0xc8>
 800121a:	2000      	movs	r0, #0
 800121c:	e008      	b.n	8001230 <_printf_common+0xa8>
 800121e:	2301      	movs	r3, #1
 8001220:	4652      	mov	r2, sl
 8001222:	4649      	mov	r1, r9
 8001224:	4638      	mov	r0, r7
 8001226:	47c0      	blx	r8
 8001228:	3001      	adds	r0, #1
 800122a:	d103      	bne.n	8001234 <_printf_common+0xac>
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001234:	3501      	adds	r5, #1
 8001236:	e7c6      	b.n	80011c6 <_printf_common+0x3e>
 8001238:	18e1      	adds	r1, r4, r3
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	2030      	movs	r0, #48	; 0x30
 800123e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001242:	4422      	add	r2, r4
 8001244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800124c:	3302      	adds	r3, #2
 800124e:	e7c7      	b.n	80011e0 <_printf_common+0x58>
 8001250:	2301      	movs	r3, #1
 8001252:	4622      	mov	r2, r4
 8001254:	4649      	mov	r1, r9
 8001256:	4638      	mov	r0, r7
 8001258:	47c0      	blx	r8
 800125a:	3001      	adds	r0, #1
 800125c:	d0e6      	beq.n	800122c <_printf_common+0xa4>
 800125e:	3601      	adds	r6, #1
 8001260:	e7d9      	b.n	8001216 <_printf_common+0x8e>
	...

08001264 <_printf_i>:
 8001264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001268:	7e0f      	ldrb	r7, [r1, #24]
 800126a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800126c:	2f78      	cmp	r7, #120	; 0x78
 800126e:	4691      	mov	r9, r2
 8001270:	4680      	mov	r8, r0
 8001272:	460c      	mov	r4, r1
 8001274:	469a      	mov	sl, r3
 8001276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800127a:	d807      	bhi.n	800128c <_printf_i+0x28>
 800127c:	2f62      	cmp	r7, #98	; 0x62
 800127e:	d80a      	bhi.n	8001296 <_printf_i+0x32>
 8001280:	2f00      	cmp	r7, #0
 8001282:	f000 80d4 	beq.w	800142e <_printf_i+0x1ca>
 8001286:	2f58      	cmp	r7, #88	; 0x58
 8001288:	f000 80c0 	beq.w	800140c <_printf_i+0x1a8>
 800128c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001294:	e03a      	b.n	800130c <_printf_i+0xa8>
 8001296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800129a:	2b15      	cmp	r3, #21
 800129c:	d8f6      	bhi.n	800128c <_printf_i+0x28>
 800129e:	a101      	add	r1, pc, #4	; (adr r1, 80012a4 <_printf_i+0x40>)
 80012a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012a4:	080012fd 	.word	0x080012fd
 80012a8:	08001311 	.word	0x08001311
 80012ac:	0800128d 	.word	0x0800128d
 80012b0:	0800128d 	.word	0x0800128d
 80012b4:	0800128d 	.word	0x0800128d
 80012b8:	0800128d 	.word	0x0800128d
 80012bc:	08001311 	.word	0x08001311
 80012c0:	0800128d 	.word	0x0800128d
 80012c4:	0800128d 	.word	0x0800128d
 80012c8:	0800128d 	.word	0x0800128d
 80012cc:	0800128d 	.word	0x0800128d
 80012d0:	08001415 	.word	0x08001415
 80012d4:	0800133d 	.word	0x0800133d
 80012d8:	080013cf 	.word	0x080013cf
 80012dc:	0800128d 	.word	0x0800128d
 80012e0:	0800128d 	.word	0x0800128d
 80012e4:	08001437 	.word	0x08001437
 80012e8:	0800128d 	.word	0x0800128d
 80012ec:	0800133d 	.word	0x0800133d
 80012f0:	0800128d 	.word	0x0800128d
 80012f4:	0800128d 	.word	0x0800128d
 80012f8:	080013d7 	.word	0x080013d7
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	1d1a      	adds	r2, r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	602a      	str	r2, [r5, #0]
 8001304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800130c:	2301      	movs	r3, #1
 800130e:	e09f      	b.n	8001450 <_printf_i+0x1ec>
 8001310:	6820      	ldr	r0, [r4, #0]
 8001312:	682b      	ldr	r3, [r5, #0]
 8001314:	0607      	lsls	r7, r0, #24
 8001316:	f103 0104 	add.w	r1, r3, #4
 800131a:	6029      	str	r1, [r5, #0]
 800131c:	d501      	bpl.n	8001322 <_printf_i+0xbe>
 800131e:	681e      	ldr	r6, [r3, #0]
 8001320:	e003      	b.n	800132a <_printf_i+0xc6>
 8001322:	0646      	lsls	r6, r0, #25
 8001324:	d5fb      	bpl.n	800131e <_printf_i+0xba>
 8001326:	f9b3 6000 	ldrsh.w	r6, [r3]
 800132a:	2e00      	cmp	r6, #0
 800132c:	da03      	bge.n	8001336 <_printf_i+0xd2>
 800132e:	232d      	movs	r3, #45	; 0x2d
 8001330:	4276      	negs	r6, r6
 8001332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001336:	485a      	ldr	r0, [pc, #360]	; (80014a0 <_printf_i+0x23c>)
 8001338:	230a      	movs	r3, #10
 800133a:	e012      	b.n	8001362 <_printf_i+0xfe>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	6820      	ldr	r0, [r4, #0]
 8001340:	1d19      	adds	r1, r3, #4
 8001342:	6029      	str	r1, [r5, #0]
 8001344:	0605      	lsls	r5, r0, #24
 8001346:	d501      	bpl.n	800134c <_printf_i+0xe8>
 8001348:	681e      	ldr	r6, [r3, #0]
 800134a:	e002      	b.n	8001352 <_printf_i+0xee>
 800134c:	0641      	lsls	r1, r0, #25
 800134e:	d5fb      	bpl.n	8001348 <_printf_i+0xe4>
 8001350:	881e      	ldrh	r6, [r3, #0]
 8001352:	4853      	ldr	r0, [pc, #332]	; (80014a0 <_printf_i+0x23c>)
 8001354:	2f6f      	cmp	r7, #111	; 0x6f
 8001356:	bf0c      	ite	eq
 8001358:	2308      	moveq	r3, #8
 800135a:	230a      	movne	r3, #10
 800135c:	2100      	movs	r1, #0
 800135e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001362:	6865      	ldr	r5, [r4, #4]
 8001364:	60a5      	str	r5, [r4, #8]
 8001366:	2d00      	cmp	r5, #0
 8001368:	bfa2      	ittt	ge
 800136a:	6821      	ldrge	r1, [r4, #0]
 800136c:	f021 0104 	bicge.w	r1, r1, #4
 8001370:	6021      	strge	r1, [r4, #0]
 8001372:	b90e      	cbnz	r6, 8001378 <_printf_i+0x114>
 8001374:	2d00      	cmp	r5, #0
 8001376:	d04b      	beq.n	8001410 <_printf_i+0x1ac>
 8001378:	4615      	mov	r5, r2
 800137a:	fbb6 f1f3 	udiv	r1, r6, r3
 800137e:	fb03 6711 	mls	r7, r3, r1, r6
 8001382:	5dc7      	ldrb	r7, [r0, r7]
 8001384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001388:	4637      	mov	r7, r6
 800138a:	42bb      	cmp	r3, r7
 800138c:	460e      	mov	r6, r1
 800138e:	d9f4      	bls.n	800137a <_printf_i+0x116>
 8001390:	2b08      	cmp	r3, #8
 8001392:	d10b      	bne.n	80013ac <_printf_i+0x148>
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	07de      	lsls	r6, r3, #31
 8001398:	d508      	bpl.n	80013ac <_printf_i+0x148>
 800139a:	6923      	ldr	r3, [r4, #16]
 800139c:	6861      	ldr	r1, [r4, #4]
 800139e:	4299      	cmp	r1, r3
 80013a0:	bfde      	ittt	le
 80013a2:	2330      	movle	r3, #48	; 0x30
 80013a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80013a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80013ac:	1b52      	subs	r2, r2, r5
 80013ae:	6122      	str	r2, [r4, #16]
 80013b0:	f8cd a000 	str.w	sl, [sp]
 80013b4:	464b      	mov	r3, r9
 80013b6:	aa03      	add	r2, sp, #12
 80013b8:	4621      	mov	r1, r4
 80013ba:	4640      	mov	r0, r8
 80013bc:	f7ff fee4 	bl	8001188 <_printf_common>
 80013c0:	3001      	adds	r0, #1
 80013c2:	d14a      	bne.n	800145a <_printf_i+0x1f6>
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	b004      	add	sp, #16
 80013ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	4833      	ldr	r0, [pc, #204]	; (80014a4 <_printf_i+0x240>)
 80013d8:	2778      	movs	r7, #120	; 0x78
 80013da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	6829      	ldr	r1, [r5, #0]
 80013e2:	061f      	lsls	r7, r3, #24
 80013e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80013e8:	d402      	bmi.n	80013f0 <_printf_i+0x18c>
 80013ea:	065f      	lsls	r7, r3, #25
 80013ec:	bf48      	it	mi
 80013ee:	b2b6      	uxthmi	r6, r6
 80013f0:	07df      	lsls	r7, r3, #31
 80013f2:	bf48      	it	mi
 80013f4:	f043 0320 	orrmi.w	r3, r3, #32
 80013f8:	6029      	str	r1, [r5, #0]
 80013fa:	bf48      	it	mi
 80013fc:	6023      	strmi	r3, [r4, #0]
 80013fe:	b91e      	cbnz	r6, 8001408 <_printf_i+0x1a4>
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	f023 0320 	bic.w	r3, r3, #32
 8001406:	6023      	str	r3, [r4, #0]
 8001408:	2310      	movs	r3, #16
 800140a:	e7a7      	b.n	800135c <_printf_i+0xf8>
 800140c:	4824      	ldr	r0, [pc, #144]	; (80014a0 <_printf_i+0x23c>)
 800140e:	e7e4      	b.n	80013da <_printf_i+0x176>
 8001410:	4615      	mov	r5, r2
 8001412:	e7bd      	b.n	8001390 <_printf_i+0x12c>
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	6826      	ldr	r6, [r4, #0]
 8001418:	6961      	ldr	r1, [r4, #20]
 800141a:	1d18      	adds	r0, r3, #4
 800141c:	6028      	str	r0, [r5, #0]
 800141e:	0635      	lsls	r5, r6, #24
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	d501      	bpl.n	8001428 <_printf_i+0x1c4>
 8001424:	6019      	str	r1, [r3, #0]
 8001426:	e002      	b.n	800142e <_printf_i+0x1ca>
 8001428:	0670      	lsls	r0, r6, #25
 800142a:	d5fb      	bpl.n	8001424 <_printf_i+0x1c0>
 800142c:	8019      	strh	r1, [r3, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	6123      	str	r3, [r4, #16]
 8001432:	4615      	mov	r5, r2
 8001434:	e7bc      	b.n	80013b0 <_printf_i+0x14c>
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	1d1a      	adds	r2, r3, #4
 800143a:	602a      	str	r2, [r5, #0]
 800143c:	681d      	ldr	r5, [r3, #0]
 800143e:	6862      	ldr	r2, [r4, #4]
 8001440:	2100      	movs	r1, #0
 8001442:	4628      	mov	r0, r5
 8001444:	f7fe fed4 	bl	80001f0 <memchr>
 8001448:	b108      	cbz	r0, 800144e <_printf_i+0x1ea>
 800144a:	1b40      	subs	r0, r0, r5
 800144c:	6060      	str	r0, [r4, #4]
 800144e:	6863      	ldr	r3, [r4, #4]
 8001450:	6123      	str	r3, [r4, #16]
 8001452:	2300      	movs	r3, #0
 8001454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001458:	e7aa      	b.n	80013b0 <_printf_i+0x14c>
 800145a:	6923      	ldr	r3, [r4, #16]
 800145c:	462a      	mov	r2, r5
 800145e:	4649      	mov	r1, r9
 8001460:	4640      	mov	r0, r8
 8001462:	47d0      	blx	sl
 8001464:	3001      	adds	r0, #1
 8001466:	d0ad      	beq.n	80013c4 <_printf_i+0x160>
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	079b      	lsls	r3, r3, #30
 800146c:	d413      	bmi.n	8001496 <_printf_i+0x232>
 800146e:	68e0      	ldr	r0, [r4, #12]
 8001470:	9b03      	ldr	r3, [sp, #12]
 8001472:	4298      	cmp	r0, r3
 8001474:	bfb8      	it	lt
 8001476:	4618      	movlt	r0, r3
 8001478:	e7a6      	b.n	80013c8 <_printf_i+0x164>
 800147a:	2301      	movs	r3, #1
 800147c:	4632      	mov	r2, r6
 800147e:	4649      	mov	r1, r9
 8001480:	4640      	mov	r0, r8
 8001482:	47d0      	blx	sl
 8001484:	3001      	adds	r0, #1
 8001486:	d09d      	beq.n	80013c4 <_printf_i+0x160>
 8001488:	3501      	adds	r5, #1
 800148a:	68e3      	ldr	r3, [r4, #12]
 800148c:	9903      	ldr	r1, [sp, #12]
 800148e:	1a5b      	subs	r3, r3, r1
 8001490:	42ab      	cmp	r3, r5
 8001492:	dcf2      	bgt.n	800147a <_printf_i+0x216>
 8001494:	e7eb      	b.n	800146e <_printf_i+0x20a>
 8001496:	2500      	movs	r5, #0
 8001498:	f104 0619 	add.w	r6, r4, #25
 800149c:	e7f5      	b.n	800148a <_printf_i+0x226>
 800149e:	bf00      	nop
 80014a0:	080018bd 	.word	0x080018bd
 80014a4:	080018ce 	.word	0x080018ce

080014a8 <__sflush_r>:
 80014a8:	898a      	ldrh	r2, [r1, #12]
 80014aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ae:	4605      	mov	r5, r0
 80014b0:	0710      	lsls	r0, r2, #28
 80014b2:	460c      	mov	r4, r1
 80014b4:	d458      	bmi.n	8001568 <__sflush_r+0xc0>
 80014b6:	684b      	ldr	r3, [r1, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dc05      	bgt.n	80014c8 <__sflush_r+0x20>
 80014bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014be:	2b00      	cmp	r3, #0
 80014c0:	dc02      	bgt.n	80014c8 <__sflush_r+0x20>
 80014c2:	2000      	movs	r0, #0
 80014c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014ca:	2e00      	cmp	r6, #0
 80014cc:	d0f9      	beq.n	80014c2 <__sflush_r+0x1a>
 80014ce:	2300      	movs	r3, #0
 80014d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014d4:	682f      	ldr	r7, [r5, #0]
 80014d6:	6a21      	ldr	r1, [r4, #32]
 80014d8:	602b      	str	r3, [r5, #0]
 80014da:	d032      	beq.n	8001542 <__sflush_r+0x9a>
 80014dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	075a      	lsls	r2, r3, #29
 80014e2:	d505      	bpl.n	80014f0 <__sflush_r+0x48>
 80014e4:	6863      	ldr	r3, [r4, #4]
 80014e6:	1ac0      	subs	r0, r0, r3
 80014e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014ea:	b10b      	cbz	r3, 80014f0 <__sflush_r+0x48>
 80014ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014ee:	1ac0      	subs	r0, r0, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	4602      	mov	r2, r0
 80014f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014f6:	6a21      	ldr	r1, [r4, #32]
 80014f8:	4628      	mov	r0, r5
 80014fa:	47b0      	blx	r6
 80014fc:	1c43      	adds	r3, r0, #1
 80014fe:	89a3      	ldrh	r3, [r4, #12]
 8001500:	d106      	bne.n	8001510 <__sflush_r+0x68>
 8001502:	6829      	ldr	r1, [r5, #0]
 8001504:	291d      	cmp	r1, #29
 8001506:	d82b      	bhi.n	8001560 <__sflush_r+0xb8>
 8001508:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <__sflush_r+0x108>)
 800150a:	410a      	asrs	r2, r1
 800150c:	07d6      	lsls	r6, r2, #31
 800150e:	d427      	bmi.n	8001560 <__sflush_r+0xb8>
 8001510:	2200      	movs	r2, #0
 8001512:	6062      	str	r2, [r4, #4]
 8001514:	04d9      	lsls	r1, r3, #19
 8001516:	6922      	ldr	r2, [r4, #16]
 8001518:	6022      	str	r2, [r4, #0]
 800151a:	d504      	bpl.n	8001526 <__sflush_r+0x7e>
 800151c:	1c42      	adds	r2, r0, #1
 800151e:	d101      	bne.n	8001524 <__sflush_r+0x7c>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b903      	cbnz	r3, 8001526 <__sflush_r+0x7e>
 8001524:	6560      	str	r0, [r4, #84]	; 0x54
 8001526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001528:	602f      	str	r7, [r5, #0]
 800152a:	2900      	cmp	r1, #0
 800152c:	d0c9      	beq.n	80014c2 <__sflush_r+0x1a>
 800152e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001532:	4299      	cmp	r1, r3
 8001534:	d002      	beq.n	800153c <__sflush_r+0x94>
 8001536:	4628      	mov	r0, r5
 8001538:	f7ff fbea 	bl	8000d10 <_free_r>
 800153c:	2000      	movs	r0, #0
 800153e:	6360      	str	r0, [r4, #52]	; 0x34
 8001540:	e7c0      	b.n	80014c4 <__sflush_r+0x1c>
 8001542:	2301      	movs	r3, #1
 8001544:	4628      	mov	r0, r5
 8001546:	47b0      	blx	r6
 8001548:	1c41      	adds	r1, r0, #1
 800154a:	d1c8      	bne.n	80014de <__sflush_r+0x36>
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0c5      	beq.n	80014de <__sflush_r+0x36>
 8001552:	2b1d      	cmp	r3, #29
 8001554:	d001      	beq.n	800155a <__sflush_r+0xb2>
 8001556:	2b16      	cmp	r3, #22
 8001558:	d101      	bne.n	800155e <__sflush_r+0xb6>
 800155a:	602f      	str	r7, [r5, #0]
 800155c:	e7b1      	b.n	80014c2 <__sflush_r+0x1a>
 800155e:	89a3      	ldrh	r3, [r4, #12]
 8001560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001564:	81a3      	strh	r3, [r4, #12]
 8001566:	e7ad      	b.n	80014c4 <__sflush_r+0x1c>
 8001568:	690f      	ldr	r7, [r1, #16]
 800156a:	2f00      	cmp	r7, #0
 800156c:	d0a9      	beq.n	80014c2 <__sflush_r+0x1a>
 800156e:	0793      	lsls	r3, r2, #30
 8001570:	680e      	ldr	r6, [r1, #0]
 8001572:	bf08      	it	eq
 8001574:	694b      	ldreq	r3, [r1, #20]
 8001576:	600f      	str	r7, [r1, #0]
 8001578:	bf18      	it	ne
 800157a:	2300      	movne	r3, #0
 800157c:	eba6 0807 	sub.w	r8, r6, r7
 8001580:	608b      	str	r3, [r1, #8]
 8001582:	f1b8 0f00 	cmp.w	r8, #0
 8001586:	dd9c      	ble.n	80014c2 <__sflush_r+0x1a>
 8001588:	6a21      	ldr	r1, [r4, #32]
 800158a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800158c:	4643      	mov	r3, r8
 800158e:	463a      	mov	r2, r7
 8001590:	4628      	mov	r0, r5
 8001592:	47b0      	blx	r6
 8001594:	2800      	cmp	r0, #0
 8001596:	dc06      	bgt.n	80015a6 <__sflush_r+0xfe>
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159e:	81a3      	strh	r3, [r4, #12]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	e78e      	b.n	80014c4 <__sflush_r+0x1c>
 80015a6:	4407      	add	r7, r0
 80015a8:	eba8 0800 	sub.w	r8, r8, r0
 80015ac:	e7e9      	b.n	8001582 <__sflush_r+0xda>
 80015ae:	bf00      	nop
 80015b0:	dfbffffe 	.word	0xdfbffffe

080015b4 <_fflush_r>:
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	690b      	ldr	r3, [r1, #16]
 80015b8:	4605      	mov	r5, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	b913      	cbnz	r3, 80015c4 <_fflush_r+0x10>
 80015be:	2500      	movs	r5, #0
 80015c0:	4628      	mov	r0, r5
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	b118      	cbz	r0, 80015ce <_fflush_r+0x1a>
 80015c6:	6a03      	ldr	r3, [r0, #32]
 80015c8:	b90b      	cbnz	r3, 80015ce <_fflush_r+0x1a>
 80015ca:	f7ff fa99 	bl	8000b00 <__sinit>
 80015ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f3      	beq.n	80015be <_fflush_r+0xa>
 80015d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015d8:	07d0      	lsls	r0, r2, #31
 80015da:	d404      	bmi.n	80015e6 <_fflush_r+0x32>
 80015dc:	0599      	lsls	r1, r3, #22
 80015de:	d402      	bmi.n	80015e6 <_fflush_r+0x32>
 80015e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e2:	f7ff fb92 	bl	8000d0a <__retarget_lock_acquire_recursive>
 80015e6:	4628      	mov	r0, r5
 80015e8:	4621      	mov	r1, r4
 80015ea:	f7ff ff5d 	bl	80014a8 <__sflush_r>
 80015ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015f0:	07da      	lsls	r2, r3, #31
 80015f2:	4605      	mov	r5, r0
 80015f4:	d4e4      	bmi.n	80015c0 <_fflush_r+0xc>
 80015f6:	89a3      	ldrh	r3, [r4, #12]
 80015f8:	059b      	lsls	r3, r3, #22
 80015fa:	d4e1      	bmi.n	80015c0 <_fflush_r+0xc>
 80015fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015fe:	f7ff fb85 	bl	8000d0c <__retarget_lock_release_recursive>
 8001602:	e7dd      	b.n	80015c0 <_fflush_r+0xc>

08001604 <__swbuf_r>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	460e      	mov	r6, r1
 8001608:	4614      	mov	r4, r2
 800160a:	4605      	mov	r5, r0
 800160c:	b118      	cbz	r0, 8001616 <__swbuf_r+0x12>
 800160e:	6a03      	ldr	r3, [r0, #32]
 8001610:	b90b      	cbnz	r3, 8001616 <__swbuf_r+0x12>
 8001612:	f7ff fa75 	bl	8000b00 <__sinit>
 8001616:	69a3      	ldr	r3, [r4, #24]
 8001618:	60a3      	str	r3, [r4, #8]
 800161a:	89a3      	ldrh	r3, [r4, #12]
 800161c:	071a      	lsls	r2, r3, #28
 800161e:	d525      	bpl.n	800166c <__swbuf_r+0x68>
 8001620:	6923      	ldr	r3, [r4, #16]
 8001622:	b31b      	cbz	r3, 800166c <__swbuf_r+0x68>
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	6922      	ldr	r2, [r4, #16]
 8001628:	1a98      	subs	r0, r3, r2
 800162a:	6963      	ldr	r3, [r4, #20]
 800162c:	b2f6      	uxtb	r6, r6
 800162e:	4283      	cmp	r3, r0
 8001630:	4637      	mov	r7, r6
 8001632:	dc04      	bgt.n	800163e <__swbuf_r+0x3a>
 8001634:	4621      	mov	r1, r4
 8001636:	4628      	mov	r0, r5
 8001638:	f7ff ffbc 	bl	80015b4 <_fflush_r>
 800163c:	b9e0      	cbnz	r0, 8001678 <__swbuf_r+0x74>
 800163e:	68a3      	ldr	r3, [r4, #8]
 8001640:	3b01      	subs	r3, #1
 8001642:	60a3      	str	r3, [r4, #8]
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	6022      	str	r2, [r4, #0]
 800164a:	701e      	strb	r6, [r3, #0]
 800164c:	6962      	ldr	r2, [r4, #20]
 800164e:	1c43      	adds	r3, r0, #1
 8001650:	429a      	cmp	r2, r3
 8001652:	d004      	beq.n	800165e <__swbuf_r+0x5a>
 8001654:	89a3      	ldrh	r3, [r4, #12]
 8001656:	07db      	lsls	r3, r3, #31
 8001658:	d506      	bpl.n	8001668 <__swbuf_r+0x64>
 800165a:	2e0a      	cmp	r6, #10
 800165c:	d104      	bne.n	8001668 <__swbuf_r+0x64>
 800165e:	4621      	mov	r1, r4
 8001660:	4628      	mov	r0, r5
 8001662:	f7ff ffa7 	bl	80015b4 <_fflush_r>
 8001666:	b938      	cbnz	r0, 8001678 <__swbuf_r+0x74>
 8001668:	4638      	mov	r0, r7
 800166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800166c:	4621      	mov	r1, r4
 800166e:	4628      	mov	r0, r5
 8001670:	f000 f806 	bl	8001680 <__swsetup_r>
 8001674:	2800      	cmp	r0, #0
 8001676:	d0d5      	beq.n	8001624 <__swbuf_r+0x20>
 8001678:	f04f 37ff 	mov.w	r7, #4294967295
 800167c:	e7f4      	b.n	8001668 <__swbuf_r+0x64>
	...

08001680 <__swsetup_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <__swsetup_r+0xac>)
 8001684:	4605      	mov	r5, r0
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	460c      	mov	r4, r1
 800168a:	b118      	cbz	r0, 8001694 <__swsetup_r+0x14>
 800168c:	6a03      	ldr	r3, [r0, #32]
 800168e:	b90b      	cbnz	r3, 8001694 <__swsetup_r+0x14>
 8001690:	f7ff fa36 	bl	8000b00 <__sinit>
 8001694:	89a3      	ldrh	r3, [r4, #12]
 8001696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800169a:	0718      	lsls	r0, r3, #28
 800169c:	d422      	bmi.n	80016e4 <__swsetup_r+0x64>
 800169e:	06d9      	lsls	r1, r3, #27
 80016a0:	d407      	bmi.n	80016b2 <__swsetup_r+0x32>
 80016a2:	2309      	movs	r3, #9
 80016a4:	602b      	str	r3, [r5, #0]
 80016a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016aa:	81a3      	strh	r3, [r4, #12]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	e034      	b.n	800171c <__swsetup_r+0x9c>
 80016b2:	0758      	lsls	r0, r3, #29
 80016b4:	d512      	bpl.n	80016dc <__swsetup_r+0x5c>
 80016b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016b8:	b141      	cbz	r1, 80016cc <__swsetup_r+0x4c>
 80016ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016be:	4299      	cmp	r1, r3
 80016c0:	d002      	beq.n	80016c8 <__swsetup_r+0x48>
 80016c2:	4628      	mov	r0, r5
 80016c4:	f7ff fb24 	bl	8000d10 <_free_r>
 80016c8:	2300      	movs	r3, #0
 80016ca:	6363      	str	r3, [r4, #52]	; 0x34
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016d2:	81a3      	strh	r3, [r4, #12]
 80016d4:	2300      	movs	r3, #0
 80016d6:	6063      	str	r3, [r4, #4]
 80016d8:	6923      	ldr	r3, [r4, #16]
 80016da:	6023      	str	r3, [r4, #0]
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	81a3      	strh	r3, [r4, #12]
 80016e4:	6923      	ldr	r3, [r4, #16]
 80016e6:	b94b      	cbnz	r3, 80016fc <__swsetup_r+0x7c>
 80016e8:	89a3      	ldrh	r3, [r4, #12]
 80016ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f2:	d003      	beq.n	80016fc <__swsetup_r+0x7c>
 80016f4:	4621      	mov	r1, r4
 80016f6:	4628      	mov	r0, r5
 80016f8:	f000 f850 	bl	800179c <__smakebuf_r>
 80016fc:	89a0      	ldrh	r0, [r4, #12]
 80016fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001702:	f010 0301 	ands.w	r3, r0, #1
 8001706:	d00a      	beq.n	800171e <__swsetup_r+0x9e>
 8001708:	2300      	movs	r3, #0
 800170a:	60a3      	str	r3, [r4, #8]
 800170c:	6963      	ldr	r3, [r4, #20]
 800170e:	425b      	negs	r3, r3
 8001710:	61a3      	str	r3, [r4, #24]
 8001712:	6923      	ldr	r3, [r4, #16]
 8001714:	b943      	cbnz	r3, 8001728 <__swsetup_r+0xa8>
 8001716:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800171a:	d1c4      	bne.n	80016a6 <__swsetup_r+0x26>
 800171c:	bd38      	pop	{r3, r4, r5, pc}
 800171e:	0781      	lsls	r1, r0, #30
 8001720:	bf58      	it	pl
 8001722:	6963      	ldrpl	r3, [r4, #20]
 8001724:	60a3      	str	r3, [r4, #8]
 8001726:	e7f4      	b.n	8001712 <__swsetup_r+0x92>
 8001728:	2000      	movs	r0, #0
 800172a:	e7f7      	b.n	800171c <__swsetup_r+0x9c>
 800172c:	2000005c 	.word	0x2000005c

08001730 <_sbrk_r>:
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	4d06      	ldr	r5, [pc, #24]	; (800174c <_sbrk_r+0x1c>)
 8001734:	2300      	movs	r3, #0
 8001736:	4604      	mov	r4, r0
 8001738:	4608      	mov	r0, r1
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	f7ff f8f4 	bl	8000928 <_sbrk>
 8001740:	1c43      	adds	r3, r0, #1
 8001742:	d102      	bne.n	800174a <_sbrk_r+0x1a>
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	b103      	cbz	r3, 800174a <_sbrk_r+0x1a>
 8001748:	6023      	str	r3, [r4, #0]
 800174a:	bd38      	pop	{r3, r4, r5, pc}
 800174c:	20000210 	.word	0x20000210

08001750 <__swhatbuf_r>:
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	460c      	mov	r4, r1
 8001754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001758:	2900      	cmp	r1, #0
 800175a:	b096      	sub	sp, #88	; 0x58
 800175c:	4615      	mov	r5, r2
 800175e:	461e      	mov	r6, r3
 8001760:	da0d      	bge.n	800177e <__swhatbuf_r+0x2e>
 8001762:	89a3      	ldrh	r3, [r4, #12]
 8001764:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001768:	f04f 0100 	mov.w	r1, #0
 800176c:	bf0c      	ite	eq
 800176e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001772:	2340      	movne	r3, #64	; 0x40
 8001774:	2000      	movs	r0, #0
 8001776:	6031      	str	r1, [r6, #0]
 8001778:	602b      	str	r3, [r5, #0]
 800177a:	b016      	add	sp, #88	; 0x58
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	466a      	mov	r2, sp
 8001780:	f000 f848 	bl	8001814 <_fstat_r>
 8001784:	2800      	cmp	r0, #0
 8001786:	dbec      	blt.n	8001762 <__swhatbuf_r+0x12>
 8001788:	9901      	ldr	r1, [sp, #4]
 800178a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800178e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001792:	4259      	negs	r1, r3
 8001794:	4159      	adcs	r1, r3
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179a:	e7eb      	b.n	8001774 <__swhatbuf_r+0x24>

0800179c <__smakebuf_r>:
 800179c:	898b      	ldrh	r3, [r1, #12]
 800179e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017a0:	079d      	lsls	r5, r3, #30
 80017a2:	4606      	mov	r6, r0
 80017a4:	460c      	mov	r4, r1
 80017a6:	d507      	bpl.n	80017b8 <__smakebuf_r+0x1c>
 80017a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80017ac:	6023      	str	r3, [r4, #0]
 80017ae:	6123      	str	r3, [r4, #16]
 80017b0:	2301      	movs	r3, #1
 80017b2:	6163      	str	r3, [r4, #20]
 80017b4:	b002      	add	sp, #8
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
 80017b8:	ab01      	add	r3, sp, #4
 80017ba:	466a      	mov	r2, sp
 80017bc:	f7ff ffc8 	bl	8001750 <__swhatbuf_r>
 80017c0:	9900      	ldr	r1, [sp, #0]
 80017c2:	4605      	mov	r5, r0
 80017c4:	4630      	mov	r0, r6
 80017c6:	f7ff fb0f 	bl	8000de8 <_malloc_r>
 80017ca:	b948      	cbnz	r0, 80017e0 <__smakebuf_r+0x44>
 80017cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017d0:	059a      	lsls	r2, r3, #22
 80017d2:	d4ef      	bmi.n	80017b4 <__smakebuf_r+0x18>
 80017d4:	f023 0303 	bic.w	r3, r3, #3
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	81a3      	strh	r3, [r4, #12]
 80017de:	e7e3      	b.n	80017a8 <__smakebuf_r+0xc>
 80017e0:	89a3      	ldrh	r3, [r4, #12]
 80017e2:	6020      	str	r0, [r4, #0]
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	81a3      	strh	r3, [r4, #12]
 80017ea:	9b00      	ldr	r3, [sp, #0]
 80017ec:	6163      	str	r3, [r4, #20]
 80017ee:	9b01      	ldr	r3, [sp, #4]
 80017f0:	6120      	str	r0, [r4, #16]
 80017f2:	b15b      	cbz	r3, 800180c <__smakebuf_r+0x70>
 80017f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017f8:	4630      	mov	r0, r6
 80017fa:	f000 f81d 	bl	8001838 <_isatty_r>
 80017fe:	b128      	cbz	r0, 800180c <__smakebuf_r+0x70>
 8001800:	89a3      	ldrh	r3, [r4, #12]
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	81a3      	strh	r3, [r4, #12]
 800180c:	89a3      	ldrh	r3, [r4, #12]
 800180e:	431d      	orrs	r5, r3
 8001810:	81a5      	strh	r5, [r4, #12]
 8001812:	e7cf      	b.n	80017b4 <__smakebuf_r+0x18>

08001814 <_fstat_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	4d07      	ldr	r5, [pc, #28]	; (8001834 <_fstat_r+0x20>)
 8001818:	2300      	movs	r3, #0
 800181a:	4604      	mov	r4, r0
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	602b      	str	r3, [r5, #0]
 8001822:	f7ff f858 	bl	80008d6 <_fstat>
 8001826:	1c43      	adds	r3, r0, #1
 8001828:	d102      	bne.n	8001830 <_fstat_r+0x1c>
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	b103      	cbz	r3, 8001830 <_fstat_r+0x1c>
 800182e:	6023      	str	r3, [r4, #0]
 8001830:	bd38      	pop	{r3, r4, r5, pc}
 8001832:	bf00      	nop
 8001834:	20000210 	.word	0x20000210

08001838 <_isatty_r>:
 8001838:	b538      	push	{r3, r4, r5, lr}
 800183a:	4d06      	ldr	r5, [pc, #24]	; (8001854 <_isatty_r+0x1c>)
 800183c:	2300      	movs	r3, #0
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	602b      	str	r3, [r5, #0]
 8001844:	f7ff f857 	bl	80008f6 <_isatty>
 8001848:	1c43      	adds	r3, r0, #1
 800184a:	d102      	bne.n	8001852 <_isatty_r+0x1a>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	b103      	cbz	r3, 8001852 <_isatty_r+0x1a>
 8001850:	6023      	str	r3, [r4, #0]
 8001852:	bd38      	pop	{r3, r4, r5, pc}
 8001854:	20000210 	.word	0x20000210

08001858 <_init>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	bf00      	nop
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr

08001864 <_fini>:
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	bf00      	nop
 8001868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186a:	bc08      	pop	{r3}
 800186c:	469e      	mov	lr, r3
 800186e:	4770      	bx	lr
